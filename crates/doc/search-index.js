var searchIndex = JSON.parse('{\
"kani":{"doc":"","t":"CYCFFAFFCCFAFOXAOXXXXAXCXXAXACIKLXXXXNNDDEIFFLLLLLLLLLLLLLLKLLFLLLLLLLLLFFFFF","n":["Arbitrary","Arbitrary","RoundRobin","any","any_where","arbitrary","assert","assume","block_on","block_on_with_spawn","concrete_playback_run","contracts","cover","cover","ensures","futures","implies","proof","proof_for_contract","requires","should_panic","slice","solver","spawn","stub","stub_verified","tuple","unwind","vec","yield_now","Arbitrary","any","any_array","ensures","proof_for_contract","requires","stub_verified","CanAssumeRunning","CannotAssumeRunning","JoinHandle","RoundRobin","SchedulingAssumption","SchedulingStrategy","block_on","block_on_with_spawn","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","from","from","from","into","into","into","into_future","pick_task","pick_task","poll","spawn","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","yield_now","any_slice_of_array","any_slice_of_array_mut","any_vec","exact_vec"],"q":[[0,"kani"],[30,"kani::arbitrary"],[33,"kani::contracts"],[37,"kani::futures"],[73,"kani::slice"],[75,"kani::vec"],[77,"core::ops::function"],[78,"alloc::vec"],[79,"core::ops::function"],[80,"core::marker"],[81,"core::pin"],[82,"core::task::wake"],[83,"core::task::poll"],[84,"core::result"],[85,"core::any"]],"d":["","Allow users to auto generate Arbitrary implementations by …","","This creates an symbolic <em>valid</em> value of type <code>T</code>. You can …","This creates a symbolic <em>valid</em> value of type <code>T</code>. The value …","This module introduces the Arbitrary trait as well as …","Creates an assertion of the specified condition and …","Creates an assumption that will be valid after this …","","","NOP <code>concrete_playback</code> for type checking during …","Kani implementation of function contracts.","Creates a cover property with the specified condition and …","A macro to check if a condition is satisfiable at a …","Add a postcondition to this function.","This module contains functions to work with futures (and …","<code>implies!(premise =&gt; conclusion)</code> means that if the <code>premise</code> …","Marks a Kani proof harness","Designates this function as a harness to check a function …","Add a precondition to this function.","Specifies that a proof harness is expected to panic.**","","Select the SAT solver to use with CBMC for this harness","","Specify a function/method stub pair to use for proof …","<code>stub_verified(TARGET)</code> is a harness attribute (to be used on","Support for arbitrary tuples where each element implements …","Set Loop unwind limit for proof harnesses The attribute …","","","This trait should be used to generate symbolic variables …","","","Add a postcondition to this function.","Designates this function as a harness to check a function …","Add a precondition to this function.","<code>stub_verified(TARGET)</code> is a harness attribute (to be used on","","","Result of spawning a task.","Keeps cycling through the tasks in a deterministic order","Indicates to the scheduler whether it can <code>kani::assume</code> …","Trait that determines the possible sequence of tasks …","A very simple executor: it polls the future in a busy loop …","Polls the given future and the tasks it may spawn until …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Picks the next task to be scheduled whenever the scheduler …","","","Spawns a task on the current global executor (which is set …","","","","","","","","","","Suspends execution of the current future, to allow the …","Given an array <code>arr</code> of length <code>LENGTH</code>, this function returns …","A mutable version of the previous function","Generates an arbitrary vector whose length is at most …","Generates an arbitrary vector that is exactly EXACT_LENGTH …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,15,15,0,0,0,0,0,0,15,16,13,15,16,13,13,15,16,13,15,16,13,16,12,13,16,0,15,16,13,15,16,13,15,16,13,0,0,0,0,0],"f":[0,0,0,[[],-1,1],[-1,-2,2,1],0,[[3,4],5],[3,5],0,0,[[[7,[[7,[6]]]],-1],5,8],0,[[3,4],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[[],[[9,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,10,[]],[[-1,-2],5,[10,11],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[-1,14],[[5,[14,15]]],[]],[[13,14],[[5,[14,15]]]],[[[17,[16]],18],19],[-1,16,[10,11]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[],[[0,[10]]]],[[[9,[-1]]],[[22,[-1]]],[]],[[[9,[-1]]],[[22,[-1]]],[]],[[],[[7,[-1]]],1],[[],[[7,[-1]]],1]],"c":[],"p":[[8,"Arbitrary",30],[8,"FnOnce",77],[15,"bool"],[15,"str"],[15,"tuple"],[15,"u8"],[3,"Vec",78],[8,"Fn",77],[15,"array"],[8,"Future",79],[8,"Sync",80],[8,"SchedulingStrategy",37],[3,"RoundRobin",37],[15,"usize"],[4,"SchedulingAssumption",37],[3,"JoinHandle",37],[3,"Pin",81],[3,"Context",82],[4,"Poll",83],[4,"Result",84],[3,"TypeId",85],[15,"slice"]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
